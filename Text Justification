
// The point is the number of spaces added to each word, it is 0 if the last word reaches the end
// This makes sure that each word in wIndex has a following spNum[i] spaces

    string assembleLine(vector<int> &wIndex, vector<int> &spNum, vector<string> &words){
        string ret;
        for(int i = 0; i < wIndex.size(); i++){
            ret.append(words[wIndex[i]]);
            ret.append(spNum[i],' ');
        }
        return ret;
    }
    
    void getLine(vector<int> &wIndex, vector<int> &spNum, int &i, int &L, vector<string> &words){
        int len = 0;
        while(i < words.size() && len < L){
            int wlen = (wIndex.empty()?words[i].length():(words[i].length() + 1));
            if(L - len >= wlen){
                len += wlen;
                wIndex.push_back(i++);
            }else break;
        }
        int size = wIndex.size();
        int wordTotalLen = len - size + 1;
        if(size > 1){
            int spLen = (L - wordTotalLen) / (size - 1);
            int adLen = (L - wordTotalLen) % (size - 1);
            for(int j = 0; j < size - 1; j++){
                if(i == words.size()) spNum.push_back(1);
                else if(adLen > 0){
                    spNum.push_back(spLen + 1); --adLen;
                }else spNum.push_back(spLen);
            }
            if(i == words.size()) spNum.push_back(L - len);
            else spNum.push_back(0);
        }else spNum.push_back(L - wordTotalLen);
    }

    vector<string> fullJustify(vector<string> &words, int L) {
        vector<string> ret;
        if(words.empty() || L < 0)  return ret;
        if(L == 0){
            string emp;
            ret.push_back(emp);
            return ret;
        }
        int i = 0;
        while(i < words.size()){
            vector<int> wIndex;
            vector<int> spNum;
            getLine(wIndex, spNum, i , L, words);
            string s = assembleLine(wIndex, spNum, words);
            ret.push_back(s);
        }
        return ret;
    }
