    // Search in Rotated Array with duplicates, the important point is figuring out the 3 situations and 
    // the relationship between A[b], A[m], and A[e]!!
    bool search(int A[], int n, int tar) {
        int b = 0, e = n - 1;
        while(b <= e){
            int m = (b + e) / 2;
            if(A[m] == tar) return 1;
            if(A[b] < A[m]){
                if(tar < A[m]){
                    if(tar >= A[b]) e = m - 1;
                    else b = m + 1;
                }else b = m + 1;
            }else if(A[m] < A[e]){
                if(tar > A[m]){
                    if(tar <= A[e]) b = m + 1;
                    else e = m - 1;
                }else e = m - 1;
            }else if(A[b] == A[m]) ++b;
            else if(A[m] == A[e]) --e;
        }
        return 0;
    }
    
    
    // Another Version, more straight foward, but more code
    // Again, the key point to this question is to draw the 3 cases 
        bool search(int A[], int n, int tar) {
        int b = 0, e = n - 1;
        while(b <= e){
            int m = (b + e) / 2;
            if(A[m] == tar) return 1;
            if(A[m] == A[e] && A[e] == A[b]){ 
                ++b; --e; 
            }else if(A[m] <= A[e] && A[e] <= A[b]){
                if(tar > A[m]){
                    if(tar <= A[e]) b = m + 1;
                    else e = m - 1;
                }else e = m - 1;
            }else if(A[e] <= A[b] && A[b] <= A[m]){
                if(tar > A[m]) b = m + 1;
                else if(tar >= A[b]) e = m - 1;
                else b = m + 1;
            }else if(A[b] <= A[m] && A[m] <= A[e]){
                if(tar > A[m]) b = m + 1;
                else e = m - 1;
            }
        }
        return 0;
    }
